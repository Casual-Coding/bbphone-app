// Generated by CoffeeScript 1.6.3
(function() {
  var BbCodeParser, CellTag, CodeTag, EmTag, HighlightTag, ImageTag, InlineCodeTag, InvalidTokenError, ItemTag, LinkTag, ListTag, Node, ParameterTag, PhpCodeTag, QuoteTag, RowTag, ShortTag, SimpleTag, SpoilerTag, StrikeTag, String, StrongTag, TableTag, Tag, Token, UnderlineTag, WrongParameterCountError, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InvalidTokenError = (function(_super) {
    __extends(InvalidTokenError, _super);

    function InvalidTokenError() {
      _ref = InvalidTokenError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return InvalidTokenError;

  })(Error);

  WrongParameterCountError = (function(_super) {
    __extends(WrongParameterCountError, _super);

    function WrongParameterCountError() {
      _ref1 = WrongParameterCountError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return WrongParameterCountError;

  })(Error);

  Token = (function() {
    function Token(type, name, parameters, string) {
      this.type = type;
      this.name = name != null ? name : '';
      this.parameters = parameters != null ? parameters : null;
      this.string = string != null ? string : '';
    }

    return Token;

  })();

  Node = (function() {
    var bbname;

    Node.prototype.allowedNodes = ['string', 'b', 'u', 's', 'i', 'mod', 'spoiler', 'm', 'code', 'php', 'img', 'quote', 'url', 'list', 'table'];

    Node.prototype.invalidStringRecovery = 'none';

    Node.prototype.invalidStartRecovery = 'string';

    Node.prototype.invalidEndRecovery = 'string';

    bbname = '';

    function Node() {
      this.children = [];
      this.parent = null;
    }

    Node.prototype.append = function(child) {
      this.children.push(child);
      return child.parent = this;
    };

    Node.prototype.getInvalidStartRecovert = function(name) {
      return this.invalidStartRecovery;
    };

    Node.prototype.toString = function() {
      var child, string, _i, _len, _ref2;
      string = '';
      _ref2 = this.children;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        child = _ref2[_i];
        string += child.toString();
      }
      return string;
    };

    return Node;

  })();

  String = (function(_super) {
    __extends(String, _super);

    function String(string) {
      this.string = string;
      String.__super__.constructor.apply(this, arguments);
    }

    String.prototype.append = function(string) {
      return this.string += string;
    };

    String.prototype.toString = function() {
      return this.string;
    };

    return String;

  })(Node);

  Tag = (function(_super) {
    __extends(Tag, _super);

    function Tag() {
      _ref2 = Tag.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Tag.parameterCount = [0];

    return Tag;

  })(Node);

  SimpleTag = (function(_super) {
    __extends(SimpleTag, _super);

    function SimpleTag() {
      _ref3 = SimpleTag.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    SimpleTag.prototype.invalidStartRecovery = 'close';

    SimpleTag.prototype.invalidEndRecovery = 'reopen';

    SimpleTag.prototype.tagName = '';

    SimpleTag.prototype.preFormat = '<%s>';

    SimpleTag.prototype.postFormat = '</%s>';

    SimpleTag.prototype.toString = function() {
      var cString, child, format, _i, _len, _ref4;
      cString = '';
      _ref4 = this.children;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        child = _ref4[_i];
        cString += child.toString();
      }
      if (cString === '') {
        return '';
      } else {
        format = [];
        format.push(this.preFormat.replace('%s', this.tagName));
        format.push(cString);
        format.push(this.postFormat.replace('%s', this.tagName));
        return format.join('');
      }
    };

    return SimpleTag;

  })(Tag);

  StrongTag = (function(_super) {
    __extends(StrongTag, _super);

    function StrongTag() {
      _ref4 = StrongTag.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    StrongTag.prototype.bbname = 'b';

    StrongTag.prototype.tagName = 'strong';

    return StrongTag;

  })(SimpleTag);

  EmTag = (function(_super) {
    __extends(EmTag, _super);

    function EmTag() {
      _ref5 = EmTag.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    EmTag.prototype.bbname = 'i';

    EmTag.prototype.tagName = 'em';

    return EmTag;

  })(SimpleTag);

  StrikeTag = (function(_super) {
    __extends(StrikeTag, _super);

    function StrikeTag() {
      _ref6 = StrikeTag.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    StrikeTag.prototype.bbname = 's';

    StrikeTag.prototype.tagName = 'del';

    return StrikeTag;

  })(SimpleTag);

  UnderlineTag = (function(_super) {
    __extends(UnderlineTag, _super);

    function UnderlineTag() {
      _ref7 = UnderlineTag.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    UnderlineTag.prototype.bbname = 'u';

    UnderlineTag.prototype.tagName = 'span';

    UnderlineTag.prototype.preFormat = '<%s style="text-decoration: underline">';

    return UnderlineTag;

  })(SimpleTag);

  InlineCodeTag = (function(_super) {
    __extends(InlineCodeTag, _super);

    function InlineCodeTag() {
      _ref8 = InlineCodeTag.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    InlineCodeTag.prototype.bbname = 'm';

    InlineCodeTag.prototype.tagName = 'pre';

    InlineCodeTag.prototype.allowedNodes = ['string'];

    return InlineCodeTag;

  })(SimpleTag);

  CodeTag = (function(_super) {
    __extends(CodeTag, _super);

    function CodeTag() {
      _ref9 = CodeTag.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    CodeTag.prototype.bbname = 'code';

    CodeTag.prototype.tagName = 'code';

    CodeTag.prototype.preFormat = '<%s><pre>';

    CodeTag.prototype.postFormat = '</pre></%s>';

    CodeTag.prototype.allowedNodes = ['string'];

    return CodeTag;

  })(SimpleTag);

  PhpCodeTag = (function(_super) {
    __extends(PhpCodeTag, _super);

    function PhpCodeTag() {
      _ref10 = PhpCodeTag.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    PhpCodeTag.prototype.bbname = 'php';

    PhpCodeTag.prototype.tagName = 'code';

    PhpCodeTag.prototype.preFormat = '<%s language="php">';

    PhpCodeTag.prototype.allowedNodes = ['string'];

    return PhpCodeTag;

  })(SimpleTag);

  SpoilerTag = (function(_super) {
    __extends(SpoilerTag, _super);

    function SpoilerTag() {
      _ref11 = SpoilerTag.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    SpoilerTag.prototype.bbname = 'spoiler';

    SpoilerTag.prototype.tagName = 'Spoiler';

    SpoilerTag.prototype.invalidEndRecovery = 'close';

    return SpoilerTag;

  })(SimpleTag);

  HighlightTag = (function(_super) {
    __extends(HighlightTag, _super);

    function HighlightTag() {
      _ref12 = HighlightTag.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    HighlightTag.prototype.bbname = 'mod';

    HighlightTag.prototype.tagName = 'Highlight';

    return HighlightTag;

  })(SimpleTag);

  ParameterTag = (function(_super) {
    __extends(ParameterTag, _super);

    ParameterTag.prototype.tagName = '';

    ParameterTag.prototype.preFormat = {
      0: '<%s>'
    };

    ParameterTag.prototype.postFormat = '</%s>';

    function ParameterTag(parameters) {
      this.parameters = parameters;
      ParameterTag.__super__.constructor.apply(this, arguments);
    }

    ParameterTag.prototype.toString = function() {
      var child, parameter, string, _i, _j, _len, _len1, _ref13, _ref14;
      string = this.preFormat[this.parameters.length];
      this.parameters.unshift(this.tagName);
      _ref13 = this.parameters;
      for (_i = 0, _len = _ref13.length; _i < _len; _i++) {
        parameter = _ref13[_i];
        string = string.replace(/%s/, parameter);
      }
      _ref14 = this.children;
      for (_j = 0, _len1 = _ref14.length; _j < _len1; _j++) {
        child = _ref14[_j];
        string += child.toString();
      }
      return string += this.postFormat.replace(/%s/, this.tagName);
    };

    return ParameterTag;

  })(Tag);

  QuoteTag = (function(_super) {
    __extends(QuoteTag, _super);

    function QuoteTag() {
      _ref13 = QuoteTag.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    QuoteTag.prototype.bbname = 'quote';

    QuoteTag.prototype.tagName = 'blockquote';

    QuoteTag.parameterCount = [0, 3];

    QuoteTag.prototype.preFormat = {
      0: '<%s>',
      3: '<%s data-thread-id="%s" data-post-id="%s" data-author="%s">'
    };

    QuoteTag.prototype.invalidEndRecovery = 'close';

    return QuoteTag;

  })(ParameterTag);

  ListTag = (function(_super) {
    __extends(ListTag, _super);

    function ListTag() {
      _ref14 = ListTag.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    ListTag.prototype.bbname = 'list';

    ListTag.prototype.tagName = 'ul';

    ListTag.prototype.allowedNodes = ['*'];

    ListTag.prototype.invalidStringRecovery = 'add *';

    ListTag.prototype.invalidStartRecovery = 'add *';

    ListTag.prototype.invalidEndRecovery = 'close';

    return ListTag;

  })(SimpleTag);

  ItemTag = (function(_super) {
    __extends(ItemTag, _super);

    function ItemTag() {
      _ref15 = ItemTag.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    ItemTag.prototype.bbname = '*';

    ItemTag.prototype.tagName = 'li';

    ItemTag.prototype.invalidEndRecovery = 'close';

    return ItemTag;

  })(SimpleTag);

  TableTag = (function(_super) {
    __extends(TableTag, _super);

    function TableTag() {
      _ref16 = TableTag.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    TableTag.prototype.bbname = 'table';

    TableTag.prototype.tagName = 'Table';

    TableTag.prototype.allowedNodes = ['--'];

    TableTag.prototype.invalidStringRecovery = 'add --';

    TableTag.prototype.invalidStartRecovery = 'add --';

    TableTag.prototype.invalidEndRecovery = 'close';

    return TableTag;

  })(SimpleTag);

  RowTag = (function(_super) {
    __extends(RowTag, _super);

    function RowTag() {
      _ref17 = RowTag.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    RowTag.prototype.bbname = '--';

    RowTag.prototype.tagName = 'Row';

    RowTag.prototype.allowedNodes = ['||'];

    RowTag.prototype.invalidStringRecovery = 'add ||';

    RowTag.prototype.invalidStartRecovery = 'add ||';

    RowTag.prototype.invalidEndRecovery = 'close';

    RowTag.prototype.getInvalidStartRecovery = function(name) {
      if (name === '--') {
        return close;
      } else {
        return this.invalidStartRecovery;
      }
    };

    return RowTag;

  })(SimpleTag);

  CellTag = (function(_super) {
    __extends(CellTag, _super);

    function CellTag() {
      _ref18 = CellTag.__super__.constructor.apply(this, arguments);
      return _ref18;
    }

    CellTag.prototype.bbname = '||';

    CellTag.prototype.tagName = 'Cell';

    CellTag.prototype.invalidEndRecovery = 'close';

    return CellTag;

  })(SimpleTag);

  ShortTag = (function(_super) {
    __extends(ShortTag, _super);

    function ShortTag(parameters) {
      if (!parameters) {
        this.needParameter = true;
        ShortTag.__super__.constructor.call(this, ['']);
      } else {
        this.needParameter = false;
        ShortTag.__super__.constructor.call(this, parameters);
      }
    }

    ShortTag.prototype.append = function(child) {
      if (child instanceof String && this.needParameter) {
        return this.parameters[0] += child.string;
      } else {
        return ShortTag.__super__.append.call(this, child);
      }
    };

    return ShortTag;

  })(ParameterTag);

  ImageTag = (function(_super) {
    __extends(ImageTag, _super);

    ImageTag.prototype.bbname = 'img';

    ImageTag.prototype.allowedNodes = ['string'];

    ImageTag.prototype.invalidStartRecovery = 'string';

    ImageTag.prototype.invalidEndRecovery = 'string';

    ImageTag.parameterCount = [0, 1];

    function ImageTag(parameters) {
      ImageTag.__super__.constructor.call(this, parameters);
      this.needParameter = true;
      if (parameters) {
        this.parameters.unshift('');
      }
    }

    ImageTag.prototype.toString = function() {
      return '<div class="image not-loaded" data-image="%s"></div>'.replace(/%s/, this.parameters[0]);
    };

    return ImageTag;

  })(ShortTag);

  LinkTag = (function(_super) {
    __extends(LinkTag, _super);

    LinkTag.prototype.bbname = 'url';

    LinkTag.prototype.allowedNodes = ['string'];

    LinkTag.prototype.invalidStartRecovery = 'string';

    LinkTag.prototype.invalidEndRecovery = 'string';

    LinkTag.parameterCount = [0, 1];

    function LinkTag(parameters) {
      LinkTag.__super__.constructor.call(this, parameters);
      this.needParameter = true;
      if (parameters) {
        this.parameters.unshift('');
      }
    }

    LinkTag.prototype.toString = function() {
      var string;
      if (this.parameters.length === 1) {
        return string = '<a href="%s">%s</a>'.replace(/%s/g, this.parameters[0]);
      } else {
        string = '<a href="%s">%s</a>'.replace(/%s/, this.parameters[1]);
        return string = string.replace(/%s/, this.parameters[0]);
      }
    };

    return LinkTag;

  })(ShortTag);

  BbCodeParser = (function() {
    BbCodeParser.REGEX_STR = '(?<string>.*?)((?<starttoken>\\[\\s*(?<sname>%s)\\s*(=(?<parameters>(\\s*(("[^"]+")|([^,"]+?))\\s*,)*(\\s*(("[^"]+")|([^,"]+?))\\s*)))?\\])|(?<endtoken>\\[\\/(?<ename>%s)\]))';

    BbCodeParser.SPLIT_RGX = XRegExp('\\s*(("(?<quoted>[^"]+)")|(?<normal>[^,"]*[^,\\s"]))\\s*');

    BbCodeParser.TAGS = {
      'b': StrongTag,
      'i': EmTag,
      's': StrikeTag,
      'u': UnderlineTag,
      'm': InlineCodeTag,
      'code': CodeTag,
      'php': PhpCodeTag,
      'spoiler': SpoilerTag,
      'mod': HighlightTag,
      'quote': QuoteTag,
      'list': ListTag,
      '*': ItemTag,
      'img': ImageTag,
      'url': LinkTag,
      'table': TableTag,
      '--': RowTag,
      '||': CellTag
    };

    BbCodeParser.splitParameters = function(string) {
      var match, parameters, pos;
      if (!string) {
        return [];
      }
      parameters = [];
      pos = 0;
      while (match = XRegExp.exec(string, BbCodeParser.SPLIT_RGX, pos)) {
        pos = match.index + match[0].length;
        if (match.quoted) {
          parameters.push(match.quoted);
        } else if (match.normal) {
          parameters.push(match.normal);
        } else {
          throw new Error("splitParameters failed");
        }
      }
      return parameters;
    };

    BbCodeParser.escapeRegex = function(string) {
      string = string.replace(/\*/, '\\*');
      return string = string.replace(/\|/, '\\|');
    };

    function BbCodeParser(tags) {
      this.tags = tags != null ? tags : {};
    }

    BbCodeParser.prototype.lexicalAnalysis = function() {
      var bbtags, match, parameters, pos, regex, tag;
      this.tokens = [];
      bbtags = (function() {
        var _i, _len, _ref19, _results;
        _ref19 = Object.keys(BbCodeParser.TAGS);
        _results = [];
        for (_i = 0, _len = _ref19.length; _i < _len; _i++) {
          tag = _ref19[_i];
          _results.push(BbCodeParser.escapeRegex(tag));
        }
        return _results;
      })();
      bbtags = "(" + (bbtags.join('|')) + ")";
      regex = XRegExp(BbCodeParser.REGEX_STR.replace(/%s/gi, bbtags), 'isg');
      pos = 0;
      while (match = XRegExp.exec(this.string, regex, pos, 'sticky')) {
        pos = match.index + match[0].length;
        if (match.string) {
          this.tokens.push(new Token('string', '', null, match.string));
        }
        if (match.starttoken) {
          parameters = BbCodeParser.splitParameters(match.parameters);
          this.tokens.push(new Token('start', match.sname.toLowerCase(), parameters, match.starttoken));
        } else if (match.endtoken) {
          this.tokens.push(new Token('end', match.ename.toLowerCase(), null, match.endtoken));
        }
      }
      if (pos < this.string.length) {
        return this.tokens.push(new Token('string', '', null, this.string.substr(pos)));
      }
    };

    BbCodeParser.prototype.parse = function(string) {
      var error, policy, token;
      this.string = string.replace(/</, '&lt;');
      this.string = this.string.replace(/>/, '&gt;');
      this.root = new Node();
      this.idx = this.root;
      this.lexicalAnalysis();
      while (this.tokens.length > 0) {
        token = this.tokens.shift();
        if (token.type === 'string') {
          try {
            this.addString(token.string);
          } catch (_error) {
            error = _error;
            if (error instanceof InvalidTokenError) {
              policy = this.idx.invalidStringRecovery;
              if (policy.substr(0, 3) === 'add') {
                this.tokens.unshift(new Token('start', policy.substr(4)));
              } else {
                throw new Error('unknown invalidStringRecovery');
              }
            }
          }
        } else if (token.type === 'start') {
          try {
            this.addStart(token.name, token.parameters);
          } catch (_error) {
            error = _error;
            if (error instanceof InvalidTokenError) {
              policy = this.idx.getInvalidStartRecovert(token.name);
              if (!this.isTagOpen2(token.name)) {
                policy = 'string';
              }
              if (policy === 'close') {
                this.tokens.unshift(new Token('end', this.idx.bbname));
              } else if (policy === 'string') {
                token.type = 'string';
              } else if (policy.substr(0, 3) === 'add') {
                this.tokens.unshift(new Token('start', policy.substr(4)));
              } else {
                throw new Error('unknown invalidStartRecovery');
              }
            } else if (error instanceof WrongParameterCountError) {
              token.type = 'string';
              continue;
            }
          }
        } else if (token.type === 'end') {
          try {
            this.addEnd(token.name);
          } catch (_error) {
            error = _error;
            if (error instanceof InvalidTokenError) {
              policy = this.idx.invalidEndRecovery;
              if (!this.isTagOpen(token.name)) {
                policy = 'string';
              }
              if (policy === 'reopen') {
                this.tokens.unshift(new Token('end', this.idx.bbname));
                this.tokens.splice(2, 0, new Token('start', this.idx.bbname));
              }
              if (policy === 'close') {
                this.tokens.unshift(new Token('end', this.idx.bbname));
              } else if (policy === 'string') {
                token.type = 'string';
              } else {
                throw new Error('unknown invalidEndRecovery');
              }
            }
          }
        } else {
          throw new Error('Unknown Token-Type: ' + token.type);
        }
      }
      return this.root.toString();
    };

    BbCodeParser.prototype.addString = function(string) {
      if (this.idx.allowedNodes.indexOf('string') === -1) {
        throw new InvalidTokenError;
      }
      return this.idx.append(new String(string));
    };

    BbCodeParser.prototype.addStart = function(name, parameters) {
      var tag, tagClass;
      if (this.idx.allowedNodes.indexOf(name) === -1) {
        throw new InvalidTokenError;
      }
      tagClass = BbCodeParser.TAGS[name];
      if (!parameters) {
        parameters = [];
      }
      if (tagClass.parameterCount.indexOf(parameters.length) === -1) {
        throw new WrongParameterCountError();
      }
      tag = new tagClass(parameters);
      this.idx.append(tag);
      return this.idx = tag;
    };

    BbCodeParser.prototype.addEnd = function(name) {
      if (this.idx.bbname === !name) {
        throw new InvalidTokenError;
      }
      return this.idx = this.idx.parent;
    };

    BbCodeParser.prototype.isTagOpen = function(name) {
      var isOpen, node;
      node = this.idx;
      isOpen = false;
      while (node === !this.root) {
        if (node.bbname === name) {
          isOpen = true;
          break;
        }
        node = node.parent;
      }
      return isOpen;
    };

    BbCodeParser.prototype.isTagOpen2 = function(name) {
      var isOpen, node;
      node = this.idx;
      isOpen = false;
      while (node === !this.root) {
        if (node.allowedNodes.indexOf(name) === !-1) {
          isOpen = true;
          break;
        }
        node = node.parent;
      }
      return isOpen;
    };

    return BbCodeParser;

  })();

  this.BbCodeParser = BbCodeParser;

}).call(this);